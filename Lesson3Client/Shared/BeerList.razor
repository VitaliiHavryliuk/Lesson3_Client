@inject HttpClient Http
@inject IJSRuntime JS

@using Models.Output
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div>@ErrorMessage</div>
}
else if (Beers != null && Beers.Count() > 0)
{
    <ul class="list">
        @foreach (var beer in Beers)
        {
            <li role="presentation">
                <div class="card">
                    <img id="image-@beer.Id"/>
                    <CardContent Name="@beer.Name"
                                 Description="@beer.Description" />

                    <footer class="card-footer">

                        <ButtonFooter Class="delete-item"
                                      IconClasses="fas fa-trash"
                                      OnClick="@(async _ => await DeleteBeer.InvokeAsync(beer))"
                                      Label="Delete" />

                        <ButtonFooter Class="edit-item"
                                      IconClasses="fas fa-edit"
                                      OnClick="@(async _ => await SelectBeer.InvokeAsync(beer))"
                                      Label="Edit" />

                    </footer>

                </div>

            </li>
        }
    </ul>
}
else
{
    <div>Loading data...</div>
}
@code {
    [Parameter] public IEnumerable<BeerDTO> Beers { get; set; }
    [Parameter] public EventCallback<BeerDTO> DeleteBeer { get; set; }
    [Parameter] public EventCallback<BeerDTO> SelectBeer { get; set; }
    [Parameter] public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        foreach(var beer in Beers)
        {
            try
            {
                await SetImageAsync(beer.Id);
            }
            catch (Exception)
            {
            }
        }
    }

    private async Task SetImageAsync(Guid id)
    {
        var imageStream = await Http.GetStreamAsync($"GetPhoto/{id}");
        var dotnetImageStream = new DotNetStreamReference(imageStream);
        await JS.InvokeVoidAsync("setImage", $"image-{id}", dotnetImageStream);
    }
}