@page "/beer/{beerId:guid?}"
@using Microsoft.AspNetCore.Authorization
@using Models.Input
@using Models.Output
@using System.Net.Http.Headers
@using Tewr.Blazor.FileReader
@attribute [Authorize]
@inject HttpClient http
@inject NavigationManager navigation
@inject IFileReaderService fileReaderService;

@if (beer == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card edit-detail">
        <header class="card-header">
            <p class="card-header-title">
                @beer.Name
            </p>
        </header>
        <div class="card-content">
            <div class="content">
                <img src="@imageData" />
                <div>
                    <i class="fas fa-save"/>
                    <input type="file" aria-label="Upload image!" class="link card-footer-item save-button" accept="image/png" id="fileUpload" @ref=fileUpload 
                        oninput="@(async () => await UploadFile())" style="display:none"/>
                    <label for="fileUpload" >Upload file!</label>
                </div>
                
                @if(!string.IsNullOrEmpty(imageData))
                {
                    <ButtonFooter Class="cancel-button"
                          IconClasses="fas fa-undo"
                          OnClick="@RemovePhoto"
                          Label="Remove" />
                }
                @if (BeerId != null)
                {
                    
                    <label class="label" for="id">id</label>
                    <input name="Id"
                           class="input"
                           value="@beer.Id"
                           readonly="readonly" /> 
                }
                
                <InputDetail Name="Name"
                             Placeholder="Oranges"
                             @bind-Value="beer.Name" />
                <InputDetail Name="Description"
                             Placeholder="box"
                             @bind-Value="beer.Description" />               
            </div>
        </div>
        <footer class="card-footer ">
            <ButtonFooter Class="cancel-button"
                          IconClasses="fas fa-undo"
                          OnClick="@CancelBeer"
                          Label="Cancel" />
            <ButtonFooter Class="save-button"
                          IconClasses="fas fa-save"
                          OnClick="@Save"
                          Label="Save" />
        </footer>
    </div>
}

@code {
    private BeerDTO beer;
    ElementReference fileUpload;
    string imageData = String.Empty;
    private bool hasImage = true;
    [Parameter] public Guid? BeerId { get; set; }

    async Task UploadFile()
    {
        var files = await fileReaderService.CreateReference(fileUpload).EnumerateFilesAsync();

        using (MemoryStream memoryStream = await files.First().CreateMemoryStreamAsync())
        {
            byte[] bytes = memoryStream.ToArray();
            imageData = $"data:image/png;base64,{Convert.ToBase64String(bytes)}";
            hasImage = true;
        }
    }

    private void RemovePhoto()
    {
        hasImage = false;
        imageData = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        if (BeerId == null)
        {
            beer = new BeerDTO();
        }
        else
        {
            var beers = await http.GetFromJsonAsync<IEnumerable<BeerDTO>>("GetAll");
            beer = beers.First(p => p.Id == BeerId);

            try
            {
                var stream = await http.GetStreamAsync($"GetPhoto/{beer.Id}");
                var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                byte[] bytes = ms.ToArray();
                imageData = $"data:image/png;base64,{Convert.ToBase64String(bytes)}";
                hasImage = true;
            }
            catch 
            {
                hasImage = false;
            }
        }
    }

    private void CancelBeer()
    {
        navigation.NavigateTo("/");
    }

    private async Task Save()
    {
        if (BeerId == null)
        {
            var response = await http.PostAsJsonAsync("Add", new CreateBeer
            {
                Name = beer.Name,
                Description = beer.Description
            });
            var json = await response.Content.ReadFromJsonAsync<BeerDTO>();
            BeerId = json.Id;
            if (hasImage)
            {
                await SendUploadPhotoRequestAsync();
            }
        }
        else
        {
            await http.PutAsJsonAsync("Update", new UpdateBeer
            {
                Id = beer.Id,
                Name = beer.Name,
                Description = beer.Description
            });

            if (!hasImage)
            {
                await http.DeleteAsync($"DeletePhoto/{BeerId}");
            }
            else if(!string.IsNullOrEmpty(imageData))
            {
                await SendUploadPhotoRequestAsync();
            }
        }
        navigation.NavigateTo("/");
    }

    private async Task SendUploadPhotoRequestAsync()
    {
        var content = new MultipartFormDataContent();
        var files = await fileReaderService.CreateReference(fileUpload).EnumerateFilesAsync();

        using (MemoryStream memoryStream = await files.First().CreateMemoryStreamAsync())
        {
            var streamContent = new StreamContent(memoryStream);
            streamContent.Headers.ContentType = new MediaTypeHeaderValue("image/png");
            content.Add(streamContent, "\"files\"", "filename.png");
            var response = await http.PostAsync(
                    requestUri: $"UploadPhoto/{BeerId}",
                    content: content
                );
        }
    }
}